{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm5/slide-toggle.js","./src/app/modules/request/components/form/form.component.html","./src/app/modules/request/components/form/form.component.ts","./src/app/modules/request/components/create-request/create-request.component.ts","./src/app/modules/request/components/create-request/create-request.component.html","./src/app/modules/request/components/search-requests/search-requests.component.html","./src/app/modules/request/components/search-requests/search-requests.component.ts","./src/app/modules/request/components/view-request/view-request.component.html","./src/app/modules/request/components/view-request/view-request.component.ts","./src/app/modules/request/request.container.ts","./src/app/modules/request/request.container.html","./src/app/modules/request/request-routing.module.ts","./src/app/modules/request/services/request.service.ts","./src/app/modules/request/request.api.ts","./src/app/modules/request/store/request.effects.ts","./src/app/modules/request/request.module.ts"],"names":["_MatSlideToggleRequiredValidatorModule","ɵmod","type","ɵinj","factory","t","MatSlideToggleModule","imports","formSubmitted","customersItems","save","ngOnInit","this","formGroup","initForm","title","required","description","customer","updateOn","saveClaim","valid","emit","get","value","state","CREATED","clientId","errorInput","controlName","control","touched","dirty","errors","FormComponent","requestFacade","rootFacade","requestGetAllCustomers","saveRequest","create","requestCreate","setLoader","getAllCustomers$","pipe","filter","data","map","response","item","code","identification_number","name","CreateRequestComponent","facade","router","setLoadingClaims","requestGetAll","search","requestGetAllFiltered","viewRequest","id","navigate","getAll$","requests","isLoadingRequests$","SearchRequestsComponent","route","responseType","requestGetById","snapshot","params","getById$","ViewRequestComponent","RequestContainer","RequestRoutingModule","forChild","path","component","children","http","claim","url","api","request","post","RequestService","actions$","service","snackBar","create$","switchMap","tap","open","duration","catchError","error","of","mergeMap","actions","isLoading","push","RequestEffects","FEATURE_REDUCER_TOKEN","RequestModule","provide","useValue","forFeature"],"mappings":"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","file":"8.b449803a7d08664329f0.js","sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nvar _c0 = [\"thumbContainer\"];\nvar _c1 = [\"toggleBar\"];\nvar _c2 = [\"input\"];\nvar _c3 = function () { return { enterDuration: 150 }; };\nvar _c4 = [\"*\"];\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: function () { return ({ disableToggleValue: false }); }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextUniqueId = 0;\n/** @docs-private */\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatSlideToggle; }),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nvar MatSlideToggleChange = /** @class */ (function () {\n    function MatSlideToggleChange(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n    return MatSlideToggleChange;\n}());\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nvar MatSlideToggleBase = /** @class */ (function () {\n    function MatSlideToggleBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatSlideToggleBase;\n}());\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nvar MatSlideToggle = /** @class */ (function (_super) {\n    __extends(MatSlideToggle, _super);\n    function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._focusMonitor = _focusMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.defaults = defaults;\n        _this._animationMode = _animationMode;\n        _this._onChange = function (_) { };\n        _this._onTouched = function () { };\n        _this._uniqueId = \"mat-slide-toggle-\" + ++nextUniqueId;\n        _this._required = false;\n        _this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        _this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        _this.id = _this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        _this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        _this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        _this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        _this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        _this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        _this.dragChange = new EventEmitter();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatSlideToggle.prototype, \"required\", {\n        /** Whether the slide-toggle is required. */\n        get: function () { return this._required; },\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"checked\", {\n        /** Whether the slide-toggle element is checked or not. */\n        get: function () { return this._checked; },\n        set: function (value) {\n            this._checked = coerceBooleanProperty(value);\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"inputId\", {\n        /** Returns the unique id for the visual hidden input. */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    MatSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (focusOrigin) {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                _this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(function () { return _this._onTouched(); });\n            }\n        });\n    };\n    MatSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    };\n    /** Method being called whenever the underlying input emits a change event. */\n    MatSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    };\n    /** Method being called whenever the slide-toggle has been clicked. */\n    MatSlideToggle.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /** Implemented as a part of ControlValueAccessor. */\n    MatSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the slide-toggle. */\n    MatSlideToggle.prototype.focus = function (options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    };\n    /** Toggles the checked state of the slide-toggle. */\n    MatSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    };\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    MatSlideToggle.prototype._emitChangeEvent = function () {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    };\n    /** Method being called whenever the label text changes. */\n    MatSlideToggle.prototype._onLabelTextChange = function () {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    };\n    /** @nocollapse */\n    MatSlideToggle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatSlideToggle.propDecorators = {\n        _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n        _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n        name: [{ type: Input }],\n        id: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        required: [{ type: Input }],\n        checked: [{ type: Input }],\n        change: [{ type: Output }],\n        toggleChange: [{ type: Output }],\n        dragChange: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", required: \"required\", checked: \"checked\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"] }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var _r0 = ɵngcc0.ɵɵreference(1);\n        var _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return MatSlideToggle;\n}(_MatSlideToggleMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatSlideToggleRequiredValidator; }),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nvar MatSlideToggleRequiredValidator = /** @class */ (function (_super) {\n    __extends(MatSlideToggleRequiredValidator, _super);\n    function MatSlideToggleRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatSlideToggleRequiredValidator;\n}(CheckboxRequiredValidator));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nvar _MatSlideToggleRequiredValidatorModule = /** @class */ (function () {\n    function _MatSlideToggleRequiredValidatorModule() {\n    }\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], function () { return []; }, null); })();\n    return _MatSlideToggleRequiredValidatorModule;\n}());\nvar MatSlideToggleModule = /** @class */ (function () {\n    function MatSlideToggleModule() {\n    }\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], function () { return []; }, null); })();\n    return MatSlideToggleModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","<form class=\"form\" [formGroup]=\"formGroup\">\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"title\">{{'REQUEST.TITLE.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <input type=\"text\" id=\"title\" name=\"title\" formControlName=\"title\" [placeholder]=\"'REQUEST.TITLE.PLACEHOLDER' | translate\">\r\n      <span *ngIf=\"errorInput('title')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"description\">{{'REQUEST.DESCRIPTION.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <textarea id=\"description\" name=\"description\" formControlName=\"description\" [placeholder]=\"'REQUEST.DESCRIPTION.PLACEHOLDER' | translate\"></textarea>\r\n      <span *ngIf=\"errorInput('description')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"customer\">{{'REQUEST.CLIENT_ID.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <app-autocomplete id=\"customer\" containerId=\"customer\" [formGroup]=\"formGroup\" [placeholder]=\"'REQUEST.CLIENT_ID.PLACEHOLDER' | translate\" [items]=\"customersItems\"></app-autocomplete>\r\n      <span *ngIf=\"errorInput('customer')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"title\">{{'REQUEST.TYPE.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <select id=\"type\" name=\"type\" formControlName=\"type\">\r\n        <option value=\"\" selected>{{'REQUEST.TYPE.PLACEHOLDER' | translate}}</option>\r\n        <option value=\"P\">{{'COMMONS.TYPES.REQUEST' | translate}}</option>\r\n        <option value=\"Q\">{{'COMMONS.TYPES.COMPLAINT' | translate}}</option>\r\n      </select>\r\n      <span *ngIf=\"errorInput('type')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"form__actions\">\r\n    <button type=\"button\" class=\"btn btn-success\" (click)=\"saveClaim()\">{{'CLAIM.BUTTON.SAVE' | translate}}</button>\r\n  </div>\r\n</form>\r\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { State } from '@src/app/core/constants/common.constants';\nimport { AutoCompleteItem } from '@src/app/core/entities/common.entities';\nimport { CreateRequest } from '../../entities/request.entities';\n\n/**\n * Componente encargada de generar el formulario de creación de petición/quejas\n */\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormComponent implements OnInit {\n  public formGroup: FormGroup;\n  private formSubmitted: boolean = false;\n\n  @Input() customersItems: AutoCompleteItem[] = [];\n\n  @Output() save: EventEmitter<CreateRequest> = new EventEmitter();\n\n  ngOnInit(): void {\n    this.formGroup = this.initForm();\n  }\n\n  private initForm(): FormGroup {\n    return new FormGroup(\n      {\n        title: new FormControl('', [Validators.required]),\n        description: new FormControl('', [Validators.required]),\n        customer: new FormControl('', [Validators.required]),\n        type: new FormControl('', [Validators.required]),\n      },\n      { updateOn: 'change' },\n    );\n  }\n\n  public saveClaim(): void {\n    this.formSubmitted = true;\n    if (this.formGroup.valid) {\n      this.save.emit({\n        title: this.formGroup.get('title').value,\n        description: this.formGroup.get('description').value,\n        state: State.CREATED,\n        clientId: this.formGroup.get('customer').value,\n        type: this.formGroup.get('type').value,\n      });\n      this.formSubmitted = false;\n    }\n  }\n\n  public errorInput(controlName: string): boolean {\n    const control = this.formGroup.get(controlName);\n    return (\n      (control.touched || control.dirty || this.formSubmitted) &&\n      !!control.errors\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport {\n  AutoCompleteItem,\n  Customer,\n  Request,\n} from '@core/entities/common.entities';\nimport { RootFacade } from '@core/store/root.facade';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CreateRequest } from '../../entities/request.entities';\nimport { RequestFacade } from '../../store/request.facade';\n\n/**\n * Componente encargada de crear una petición/queja\n */\n@Component({\n  selector: 'app-create-request',\n  templateUrl: './create-request.component.html',\n  styleUrls: ['./create-request.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreateRequestComponent implements OnInit {\n  constructor(\n    private requestFacade: RequestFacade,\n    private rootFacade: RootFacade,\n  ) {}\n\n  ngOnInit() {\n    this.rootFacade.requestGetAllCustomers();\n  }\n\n  public saveRequest(create: CreateRequest): void {\n    this.requestFacade.requestCreate(create);\n    this.rootFacade.setLoader(true);\n  }\n\n  get customers$(): Observable<Customer[]> {\n    return this.rootFacade.getAllCustomers$.pipe(\n      filter((data) => !!data),\n      map((data) => data.response),\n    );\n  }\n\n  get customersAutocomplete$(): Observable<AutoCompleteItem[]> {\n    return this.rootFacade.getAllCustomers$.pipe(\n      filter((data) => !!data && !!data.response),\n      map((data) =>\n        data.response.map((item) => ({\n          code: item.identification_number,\n          name: `${item.identification_number}`,\n          filter: item.identification_number,\n        })),\n      ),\n    );\n  }\n}\n","<div class=\"create-request\">\r\n  <div class=\"create-request__form\">\r\n    <app-form [customersItems]=\"customersAutocomplete$ | async\" (save)=\"saveRequest($event)\"></app-form>\r\n  </div>\r\n</div>\r\n","<div class=\"search-requests\" [formGroup]=\"formGroup\">\r\n  <div class=\"search-requests-search\">\r\n    <div class=\"input-group mb-3\">\r\n      <input type=\"text\" class=\"form-control\" [placeholder]=\"'REQUEST.SEARCH.PLACEHOLDER' | translate\" aria-label=\"Tipo, número o nombre de quien pertenece\" aria-describedby=\"basic-addon2\" formControlName=\"search\">\r\n      <div class=\"input-group-append\">\r\n        <button class=\"btn btn-success\" type=\"button\" (click)=\"search()\">Buscar</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-requests-table\">\r\n    <ngx-datatable\r\n      class=\"material\"\r\n      columnMode=\"flex\"\r\n      rowHeight=\"auto\"\r\n      [rows]=\"requests$ | async\"\r\n      [headerHeight]=\"50\"\r\n      [footerHeight]=\"50\"\r\n      [loadingIndicator]=\"isLoadingRequests$ | async\">\r\n      <ngx-datatable-column prop=\"id\" name=\"{{ 'REQUEST.ID.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"title\" name=\"{{ 'REQUEST.TITLE.LABEL' | translate | uppercase }}\" [flexGrow]=\"1\">\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"description\" name=\"{{ 'REQUEST.DESCRIPTION.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"creation_date\" name=\"{{ 'REQUEST.CREATION_DATE.LABEL' | translate | uppercase }}\" [flexGrow]=\"1.2\">\r\n        <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n          {{ value | date:'dd/MM/yyyy' }}\r\n      </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"customer\" name=\"{{ 'REQUEST.CUSTOMER.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n        <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n          {{ value | formatCustomer }}\r\n      </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"type\" name=\"{{ 'REQUEST.TYPE.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n        <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n          {{ value | requestType }}\r\n      </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column name=\"{{ 'REQUEST.OPERATIONS' | translate | uppercase }}\" [flexGrow]=\"1\">\r\n        <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <button mat-icon-button (click)=\"viewRequest(row?.id)\">\r\n            <mat-icon matSuffix>remove_red_eye</mat-icon>\r\n          </button>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Request } from '@src/app/core/entities/common.entities';\nimport { RootFacade } from '@src/app/core/store/root.facade';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { filter, map } from 'rxjs/operators';\nimport { RequestFacade } from '../../store/request.facade';\n\n/**\n * Componente encargada de buscar una petición/queja\n */\n@Component({\n  selector: 'app-search-requests',\n  templateUrl: './search-requests.component.html',\n  styleUrls: ['./search-requests.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchRequestsComponent implements OnInit {\n  public formGroup: FormGroup;\n\n  constructor(\n    private facade: RootFacade,\n    private requestFacade: RequestFacade,\n    private router: Router,\n  ) {\n    requestFacade.setLoadingClaims(true);\n    facade.requestGetAll();\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.initForm();\n  }\n\n  private initForm(): FormGroup {\n    return new FormGroup(\n      {\n        search: new FormControl('', []),\n      },\n      { updateOn: 'change' },\n    );\n  }\n\n  public search(): void {\n    const value = this.formGroup.get('search').value;\n    this.requestFacade.setLoadingClaims(true);\n    if (!value) {\n      this.facade.requestGetAll();\n    } else {\n      this.facade.requestGetAllFiltered(value);\n    }\n  }\n\n  public viewRequest(id: string): void {\n    this.router.navigate(['/request/' + id]);\n  }\n\n  get requests$(): Observable<Request[]> {\n    return this.facade.getAll$.pipe(\n      filter((requests) => !!requests),\n      map((requests) => requests.response),\n    );\n  }\n\n  get isLoadingRequests$(): Observable<boolean> {\n    return this.requestFacade.isLoadingRequests$;\n  }\n}\n","<div class=\"view-request\">\r\n  <div class=\"card\" *ngIf=\"request$ | async as request\">\r\n    <h4 class=\"card-header\">{{'REQUEST.MAIN' | translate}} {{request?.id}}</h4>\r\n    <ul class=\"list-group list-group-flush\">\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-request__title\">{{'REQUEST.TITLE.LABEL' | translate}}</label>\r\n        <label class=\"view-request__value\">{{request?.title}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-request__title\">{{'REQUEST.DESCRIPTION.LABEL' | translate}}</label>\r\n        <label class=\"view-request__value\">{{request?.description}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-request__title\">{{'REQUEST.CREATION_DATE.LABEL' | translate}}</label>\r\n        <label class=\"view-request__value\">{{request?.creation_date}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-request__title\">{{'REQUEST.CUSTOMER.LABEL' | translate}}</label>\r\n        <label class=\"view-request__value\">{{request?.customer | formatCustomer}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-request__title\">{{'REQUEST.ANSWER.LABEL' | translate}}</label>\r\n        <label class=\"view-request__value\">{{request?.answer}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-request__title\">{{'REQUEST.STATE.LABEL' | translate}}</label>\r\n        <label class=\"view-request__value\">{{request?.state | state | translate}}</label>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RootFacade } from '@core/store/root.facade';\nimport { Request } from '@src/app/core/entities/common.entities';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * Componente encargada de visualizar peticiones/quejas\n */\n@Component({\n  selector: 'app-view-request',\n  templateUrl: './view-request.component.html',\n  styleUrls: ['./view-request.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewRequestComponent implements OnInit {\n  constructor(private facade: RootFacade, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    if (!!this.responseType) {\n      this.facade.requestGetById(this.responseType);\n    }\n  }\n\n  get responseType(): string {\n    return this.route.snapshot.params.id;\n  }\n\n  get request$(): Observable<Request> {\n    return this.facade.getById$.pipe(filter((data) => !!data));\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n/**\n * Componente container encargado de encapsular todos los componentes para peticiones y quejas\n */\n@Component({\n  selector: 'app-request',\n  templateUrl: './request.container.html',\n  styleUrls: ['./request.container.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RequestContainer {}\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CreateRequestComponent } from './components/create-request/create-request.component';\nimport { SearchRequestsComponent } from './components/search-requests/search-requests.component';\nimport { ViewRequestComponent } from './components/view-request/view-request.component';\nimport { RequestContainer } from './request.container';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: RequestContainer,\n        children: [\n          {\n            path: '',\n            component: SearchRequestsComponent,\n          },\n          {\n            path: 'save',\n            component: CreateRequestComponent,\n          },\n          {\n            path: ':id',\n            component: ViewRequestComponent,\n          },\n        ],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class RequestRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport * as routes from '../request.api';\nimport { urlBuilder } from '@core/helpers/url-builder.helper';\nimport { environment as ENV } from '@environment';\nimport { CreateRequest } from '../entities/request.entities';\nimport { Request } from '@core/entities/common.entities';\n\n/**\n * Cliente encargado de los servicios de request (Petición/Queja)\n */\n@Injectable()\nexport class RequestService {\n  constructor(private http: HttpClient) {}\n\n  public create(claim: CreateRequest): Observable<Request> {\n    const url = urlBuilder(ENV.api.request + routes.default.create);\n    return this.http.post<Request>(url, claim);\n  }\n}\n","export default {\n  create: '/create',\n};\n","import { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { switchMap, mergeMap, catchError, tap } from 'rxjs/operators';\n\nimport { RequestService } from '../services/request.service';\nimport * as RequestActions from './request.actions';\nimport * as RootActions from '@core/store/actions/common.actions';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable()\nexport class RequestEffects {\n  constructor(\n    private actions$: Actions,\n    private service: RequestService,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  public create$: Observable<Action> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RequestActions.requestCreate),\n      switchMap(({ body }) =>\n        this.service.create(body).pipe(\n          tap(() => {\n            this.snackBar.open('Creación exitosa!', null, {\n              duration: 3000,\n            });\n          }),\n          catchError(({ error }) => {\n            this.snackBar.open('Ocurrio un error en la transacción', null, {\n              duration: 3000,\n            });\n            return of({ error });\n          }),\n          mergeMap((response) => {\n            const actions: Action[] = [\n              RootActions.setLoader({ isLoading: false }),\n            ];\n            if (!('error' in response)) {\n              actions.push(RequestActions.responseCreate({ response }));\n            }\n\n            return actions;\n          }),\n        ),\n      ),\n    ),\n  );\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActionReducerMap, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { PageModule } from '@core/components/page/page.module';\nimport { RequestState } from './store/request.state';\nimport { reducer, requestFeatureName } from './store/request.reducer';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { ModalModule } from '@src/app/core/components/modal/modal.module';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { RequestRoutingModule } from './request-routing.module';\nimport { RequestEffects } from './store/request.effects';\nimport { RequestContainer } from './request.container';\nimport { RequestFacade } from './store/request.facade';\nimport { RequestService } from './services/request.service';\nimport { PipesModule } from '@src/app/core/pipes/pipes.module';\nimport { FormComponent } from './components/form/form.component';\nimport { CreateRequestComponent } from './components/create-request/create-request.component';\nimport { AutocompleteModule } from '@src/app/core/components/autocomplete/autocomplete.module';\nimport { SearchRequestsComponent } from './components/search-requests/search-requests.component';\nimport { ViewRequestComponent } from './components/view-request/view-request.component';\n\nexport const FEATURE_REDUCER_TOKEN = new InjectionToken<\n  ActionReducerMap<RequestState>\n>('Request Reducer');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RequestRoutingModule,\n    PageModule,\n    TranslateModule,\n    StoreModule.forFeature(requestFeatureName, FEATURE_REDUCER_TOKEN),\n    EffectsModule.forFeature([RequestEffects]),\n    NgxDatatableModule,\n    MatIconModule,\n    MatSlideToggleModule,\n    ModalModule,\n    MatSnackBarModule,\n    PipesModule,\n    AutocompleteModule,\n  ],\n  declarations: [\n    RequestContainer,\n    FormComponent,\n    CreateRequestComponent,\n    SearchRequestsComponent,\n    ViewRequestComponent,\n  ],\n  providers: [\n    {\n      provide: FEATURE_REDUCER_TOKEN,\n      useValue: reducer,\n    },\n    RequestFacade,\n    RequestService,\n  ],\n})\nexport class RequestModule {}\n"],"sourceRoot":"webpack:///"}