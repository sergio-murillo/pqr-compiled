{"version":3,"sources":["./src/app/modules/claim/store/claim.actions.ts","./src/app/modules/claim/store/claim.reducer.ts","./src/app/modules/claim/store/index.ts","./src/app/modules/claim/store/claim.facade.ts","./src/app/modules/claim/claim.container.ts","./src/app/modules/claim/claim.container.html","./src/app/modules/claim/components/form/form.component.html","./src/app/modules/claim/components/form/form.component.ts","./src/app/modules/claim/components/create-claim/create-claim.component.ts","./src/app/modules/claim/components/create-claim/create-claim.component.html","./src/app/core/pipes/format-request.pipe.ts","./src/app/modules/claim/components/search-claims/search-claims.component.html","./src/app/modules/claim/components/search-claims/search-claims.component.ts","./src/app/modules/claim/components/view-claim/view-claim.component.html","./src/app/modules/claim/components/view-claim/view-claim.component.ts","./src/app/modules/claim/claim-routing.module.ts","./src/app/modules/claim/services/claim.service.ts","./src/app/modules/claim/claim.api.ts","./src/app/modules/claim/store/claim.effects.ts","./src/app/modules/claim/claim.module.ts"],"names":["requestGetById","responseGetById","requestGetAll","responseGetAll","requestCreate","responseCreate","requestGetAllFiltered","responseGetAllFiltered","setLoadingClaims","claimReducers","getById","getAll","create","isLoadingClaims","state","response","isLoading","reducer","action","ClaimRootSelector","getAllSelector","data","getByIdSelector","createClaimSelector","isLoadingClaimsSelector","store","getById$","this","select","getAll$","create$","isLoadingClaims$","id","dispatch","filter","body","ClaimFacade","formBuilder","facade","loading","submitted","ngOnInit","ClaimContainer","formSubmitted","requestItems","save","formGroup","initForm","title","required","description","request","updateOn","saveClaim","valid","emit","get","value","requestId","CREATED","errorInput","controlName","control","touched","dirty","errors","FormComponent","claimFacade","rootFacade","setLoader","pipe","map","item","code","name","CreateClaimComponent","transform","FormatClaimPipe","router","search","viewClaim","navigate","claims","SearchClaimsComponent","routes","path","component","children","route","responseType","snapshot","params","ViewClaimComponent","ClaimRoutingModule","forChild","http","claim","url","api","post","findAll","findById","ClaimService","actions$","service","snackBar","switchMap","mergeMap","tap","open","duration","catchError","error","of","actions","push","getAllFiltered$","ClaimEffects","FEATURE_REDUCER_TOKEN","ClaimModule","provide","useValue","forFeature"],"mappings":"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","file":"6.f5c81e7a508c530390fd.js","sourcesContent":["import { createAction, props } from '@ngrx/store';\nimport { Claim, CreateClaim, ListClaim } from '../entities/claim.entities';\n\nexport const requestGetById = createAction(\n  '[Claims] Request By Id',\n  props<{ id: string }>(),\n);\n\nexport const responseGetById = createAction(\n  '[Claims] Response By Id',\n  props<{ response: Claim }>(),\n);\n\nexport const requestGetAll = createAction('[Claims] Request All');\n\nexport const responseGetAll = createAction(\n  '[Claims] Response All',\n  props<{ response: ListClaim }>(),\n);\n\nexport const requestCreate = createAction(\n  '[Claims] Request Create',\n  props<{ body: CreateClaim }>(),\n);\n\nexport const responseCreate = createAction(\n  '[Claims] Response Create',\n  props<{ response: Claim }>(),\n);\n\nexport const requestGetAllFiltered = createAction(\n  '[Claims] Request All Filters',\n  props<{ filter: string }>(),\n);\n\nexport const responseGetAllFiltered = createAction(\n  '[Claims] Response All Filters',\n  props<{ response: ListClaim }>(),\n);\n\nexport const setLoadingClaims = createAction(\n  '[Claims] Set Loading Claims',\n  props<{ isLoading: boolean }>(),\n);\n","import { createReducer, on, Action } from '@ngrx/store';\nimport { Claim, ListClaim } from '../entities/claim.entities';\n\nimport * as ClaimActions from './claim.actions';\nimport { ClaimState } from './claim.state';\n\nexport const claimFeatureName = 'claim';\n\nexport const initialState: ClaimState = {\n  getById: ({} as any) as Claim,\n  getAll: ({} as any) as ListClaim,\n  create: ({} as any) as Claim,\n  isLoadingClaims: false,\n};\n\nconst claimReducers = createReducer(\n  initialState,\n  on(ClaimActions.responseGetById, (state, { response }) => {\n    return {\n      ...state,\n      getById: response,\n    };\n  }),\n  on(ClaimActions.responseGetAll, (state, { response }) => {\n    return {\n      ...state,\n      getAll: response,\n    };\n  }),\n  on(ClaimActions.responseCreate, (state, { response }) => {\n    return {\n      ...state,\n      create: response,\n    };\n  }),\n  on(ClaimActions.responseGetAllFiltered, (state, { response }) => {\n    return {\n      ...state,\n      getAll: response,\n    };\n  }),\n  on(ClaimActions.setLoadingClaims, (state, { isLoading }) => {\n    return {\n      ...state,\n      isLoadingClaims: isLoading,\n    };\n  }),\n);\n\nexport function reducer(state: ClaimState | undefined, action: Action) {\n  return claimReducers(state, action);\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\n\nimport { ClaimState } from './claim.state';\nimport { claimFeatureName } from './claim.reducer';\n\nexport const ClaimRootSelector = createFeatureSelector<ClaimState>(\n  claimFeatureName,\n);\n\nexport const getAllSelector = createSelector(\n  ClaimRootSelector,\n  (data) => data?.getAll,\n);\n\nexport const getByIdSelector = createSelector(\n  ClaimRootSelector,\n  (data) => data?.getById,\n);\n\nexport const createClaimSelector = createSelector(\n  ClaimRootSelector,\n  (data) => data?.create,\n);\n\nexport const isLoadingClaimsSelector = createSelector(\n  ClaimRootSelector,\n  (data) => data.isLoadingClaims,\n);\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\n\nimport * as ClaimActions from './claim.actions';\nimport { Claim, CreateClaim, ListClaim } from '../entities/claim.entities';\nimport {\n  createClaimSelector,\n  getAllSelector,\n  getByIdSelector,\n  isLoadingClaimsSelector,\n} from '.';\n\n@Injectable()\nexport class ClaimFacade {\n  public getById$: Observable<Claim> = this.store.select(getByIdSelector);\n\n  public getAll$: Observable<ListClaim> = this.store.select(getAllSelector);\n\n  public create$: Observable<Claim> = this.store.select(createClaimSelector);\n\n  public isLoadingClaims$: Observable<boolean> = this.store.select(\n    isLoadingClaimsSelector,\n  );\n\n  constructor(private store: Store<any>) {}\n\n  public requestGetById(id: string): void {\n    this.store.dispatch(ClaimActions.requestGetById({ id }));\n  }\n\n  public requestGetAll(): void {\n    this.store.dispatch(ClaimActions.requestGetAll());\n  }\n\n  public requestGetAllFiltered(filter: string): void {\n    this.store.dispatch(ClaimActions.requestGetAllFiltered({ filter }));\n  }\n\n  public requestCreate(body: CreateClaim): void {\n    this.store.dispatch(ClaimActions.requestCreate({ body }));\n  }\n\n  public setLoadingClaims(isLoading: boolean): void {\n    this.store.dispatch(ClaimActions.setLoadingClaims({ isLoading }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ClaimFacade } from './store/claim.facade';\n\n/**\n * Componente container encargado de encapsular todos los componentes para reclamos\n */\n@Component({\n  styleUrls: ['./claim.container.sass'],\n  templateUrl: 'claim.container.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClaimContainer implements OnInit {\n  public form: FormGroup;\n  public loading = false;\n  public submitted = false;\n\n  constructor(private formBuilder: FormBuilder, private facade: ClaimFacade) {}\n\n  ngOnInit() {}\n}\n","<router-outlet></router-outlet>\r\n","<form class=\"form\" [formGroup]=\"formGroup\">\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"title\">{{'CLAIM.TITLE.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <input type=\"text\" id=\"title\" name=\"title\" formControlName=\"title\" [placeholder]=\"'CLAIM.TITLE.PLACEHOLDER' | translate\">\r\n      <span *ngIf=\"errorInput('title')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"description\">{{'CLAIM.DESCRIPTION.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <textarea id=\"description\" name=\"description\" formControlName=\"description\" [placeholder]=\"'CLAIM.DESCRIPTION.PLACEHOLDER' | translate\"></textarea>\r\n      <span *ngIf=\"errorInput('description')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-25\">\r\n      <label for=\"request\">{{'CLAIM.REQUEST_ID.LABEL' | translate}}</label>\r\n    </div>\r\n    <div class=\"col-75\">\r\n      <app-autocomplete id=\"request\" containerId=\"request\" [formGroup]=\"formGroup\" [placeholder]=\"'CLAIM.REQUEST_ID.PLACEHOLDER' | translate\" [items]=\"requestItems\"></app-autocomplete>\r\n      <span *ngIf=\"errorInput('request')\" class=\"error\">{{'RESPONSES.REQUIRED' | translate}}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"form__actions\">\r\n    <button type=\"button\" class=\"btn btn-success\" (click)=\"saveClaim()\">{{'CLAIM.BUTTON.SAVE' | translate}}</button>\r\n  </div>\r\n</form>\r\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { State } from '@src/app/core/constants/common.constants';\nimport { AutoCompleteItem } from '@src/app/core/entities/common.entities';\nimport { CreateClaim } from '../../entities/claim.entities';\n\n/**\n * Componente encargada de generar el formulario de creación de reclamos\n */\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormComponent implements OnInit {\n  public formGroup: FormGroup;\n  public formSubmitted: boolean = false;\n\n  @Input() requestItems: AutoCompleteItem[] = [];\n\n  @Output() save: EventEmitter<CreateClaim> = new EventEmitter();\n\n  ngOnInit(): void {\n    this.formGroup = this.initForm();\n  }\n\n  private initForm(): FormGroup {\n    return new FormGroup(\n      {\n        title: new FormControl('', [Validators.required]),\n        description: new FormControl('', [Validators.required]),\n        request: new FormControl('', [Validators.required]),\n      },\n      { updateOn: 'change' },\n    );\n  }\n\n  public saveClaim(): void {\n    this.formSubmitted = true;\n    if (this.formGroup.valid) {\n      this.save.emit({\n        title: this.formGroup.get('title').value,\n        description: this.formGroup.get('description').value,\n        requestId: this.formGroup.get('request').value,\n        state: State.CREATED,\n      });\n      this.formSubmitted = false;\n    }\n  }\n\n  public errorInput(controlName: string): boolean {\n    const control = this.formGroup.get(controlName);\n    return (\n      (control.touched || control.dirty || this.formSubmitted) &&\n      !!control.errors\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { AutoCompleteItem, Request } from '@core/entities/common.entities';\nimport { RootFacade } from '@core/store/root.facade';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CreateClaim } from '../../entities/claim.entities';\nimport { ClaimFacade } from '../../store/claim.facade';\n\n/**\n * Componente encargada de crear un reclamo\n */\n@Component({\n  selector: 'app-create-claim',\n  templateUrl: './create-claim.component.html',\n  styleUrls: ['./create-claim.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreateClaimComponent implements OnInit {\n  constructor(\n    public claimFacade: ClaimFacade,\n    private rootFacade: RootFacade,\n  ) {}\n\n  ngOnInit() {\n    this.rootFacade.requestGetAll();\n  }\n\n  public saveClaim(create: CreateClaim): void {\n    this.claimFacade.requestCreate(create);\n    this.rootFacade.setLoader(true);\n  }\n\n  get requests$(): Observable<Request[]> {\n    return this.rootFacade.getAll$.pipe(\n      filter((data) => !!data),\n      map((data) => data.response),\n    );\n  }\n\n  get requestsAutocomplete$(): Observable<AutoCompleteItem[]> {\n    return this.rootFacade.getAll$.pipe(\n      filter((data) => !!data && !!data.response),\n      map((data) =>\n        data.response.map((item) => ({\n          code: item.id,\n          name: `${item.id}`,\n          filter: item.id,\n        })),\n      ),\n    );\n  }\n}\n","<div class=\"create-claim\">\r\n  <div class=\"create-claim__form\">\r\n    <app-form [requestItems]=\"requestsAutocomplete$ | async\" (save)=\"saveClaim($event)\"></app-form>\r\n  </div>\r\n</div>\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatRequest',\n})\nexport class FormatClaimPipe implements PipeTransform {\n  public transform(value: any): string {\n    return `${value?.id} - ${value?.title}`;\n  }\n}\n","<div class=\"search-claims\" [formGroup]=\"formGroup\">\r\n  <div class=\"search-claims-search\">\r\n    <div class=\"input-group mb-3\">\r\n      <input type=\"text\" class=\"form-control\" [placeholder]=\"'CLAIM.SEARCH.PLACEHOLDER' | translate\" aria-label=\"Tipo, número o nombre de quien pertenece\" aria-describedby=\"basic-addon2\" formControlName=\"search\">\r\n      <div class=\"input-group-append\">\r\n        <button class=\"btn btn-success\" type=\"button\" (click)=\"search()\">Buscar</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-claims-table\">\r\n    <ngx-datatable\r\n      class=\"material\"\r\n      columnMode=\"flex\"\r\n      rowHeight=\"auto\"\r\n      [rows]=\"claims$ | async\"\r\n      [headerHeight]=\"50\"\r\n      [footerHeight]=\"50\"\r\n      [loadingIndicator]=\"isLoadingClaims$ | async\">\r\n      <ngx-datatable-column prop=\"id\" name=\"{{ 'CLAIM.ID.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"title\" name=\"{{ 'CLAIM.TITLE.LABEL' | translate | uppercase }}\" [flexGrow]=\"1\">\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"description\" name=\"{{ 'CLAIM.DESCRIPTION.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"creation_date\" name=\"{{ 'CLAIM.CREATION_DATE.LABEL' | translate | uppercase }}\" [flexGrow]=\"1.2\">\r\n        <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n          {{ value | date:'dd/MM/yyyy' }}\r\n      </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"customer\" name=\"{{ 'CLAIM.CUSTOMER.LABEL' | translate | uppercase }}\" [flexGrow]=\"2\">\r\n        <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n          {{ value | formatCustomer }}\r\n      </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column prop=\"request\" name=\"{{ 'CLAIM.REQUEST.LABEL' | translate | uppercase }}\" [flexGrow]=\"1\">\r\n        <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n          {{ value | formatRequest }}\r\n      </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column name=\"{{ 'CLAIM.OPERATIONS' | translate | uppercase }}\" [flexGrow]=\"1\">\r\n        <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <button mat-icon-button (click)=\"viewClaim(row?.id)\">\r\n            <mat-icon matSuffix>remove_red_eye</mat-icon>\r\n          </button>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { filter, map } from 'rxjs/operators';\nimport { Claim } from '../../entities/claim.entities';\nimport { ClaimFacade } from '../../store/claim.facade';\n\n/**\n * Componente encargada de buscar un reclamo\n */\n@Component({\n  selector: 'app-search-claims',\n  templateUrl: './search-claims.component.html',\n  styleUrls: ['./search-claims.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchClaimsComponent implements OnInit {\n  public formGroup: FormGroup;\n\n  constructor(private facade: ClaimFacade, private router: Router) {\n    facade.setLoadingClaims(true);\n    facade.requestGetAll();\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.initForm();\n  }\n\n  private initForm(): FormGroup {\n    return new FormGroup(\n      {\n        search: new FormControl('', []),\n      },\n      { updateOn: 'change' },\n    );\n  }\n\n  public search(): void {\n    const value = this.formGroup.get('search').value;\n    this.facade.setLoadingClaims(true);\n    if (!value) {\n      this.facade.requestGetAll();\n    } else {\n      this.facade.requestGetAllFiltered(value);\n    }\n  }\n\n  public viewClaim(id: string): void {\n    this.router.navigate(['/claim/' + id]);\n  }\n\n  get claims$(): Observable<Claim[]> {\n    return this.facade.getAll$.pipe(\n      filter((claims) => !!claims),\n      map((claims) => claims.response),\n    );\n  }\n\n  get isLoadingClaims$(): Observable<boolean> {\n    return this.facade.isLoadingClaims$;\n  }\n}\n","<div class=\"view-claim\">\r\n  <div class=\"card\" *ngIf=\"claim$ | async as claim\">\r\n    <h4 class=\"card-header\">{{'CLAIM.MAIN' | translate}} {{claim?.id}}</h4>\r\n    <ul class=\"list-group list-group-flush\">\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-claim__title\">{{'CLAIM.TITLE.LABEL' | translate}}</label>\r\n        <label class=\"view-claim__value\">{{claim?.title}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-claim__title\">{{'CLAIM.DESCRIPTION.LABEL' | translate}}</label>\r\n        <label class=\"view-claim__value\">{{claim?.description}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-claim__title\">{{'CLAIM.CREATION_DATE.LABEL' | translate}}</label>\r\n        <label class=\"view-claim__value\">{{claim?.creation_date}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-claim__title\">{{'CLAIM.CUSTOMER.LABEL' | translate}}</label>\r\n        <label class=\"view-claim__value\">{{claim?.customer | formatCustomer}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\" *ngIf=\"claim?.answer\">\r\n        <label class=\"view-claim__title\">{{'CLAIM.ANSWER.LABEL' | translate}}</label>\r\n        <label class=\"view-claim__value\">{{claim?.answer}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <label class=\"view-claim__title\">{{'CLAIM.STATE.LABEL' | translate}}</label>\r\n        <label class=\"view-claim__value\">{{claim?.state | state | translate}}</label>\r\n      </li>\r\n      <li class=\"list-group-item\">\r\n        <div class=\"card\">\r\n          <h4 class=\"card-header\">{{claim?.request?.type | requestType}} | {{'CLAIM.MAIN' | translate}} {{claim?.request?.id}}</h4>\r\n          <ul class=\"list-group list-group-flush\">\r\n            <li class=\"list-group-item\">\r\n              <label class=\"view-claim__title\">{{'REQUEST.TITLE.LABEL' | translate}}</label>\r\n              <label class=\"view-claim__value\">{{claim?.request?.title}}</label>\r\n            </li>\r\n            <li class=\"list-group-item\">\r\n              <label class=\"view-claim__title\">{{'REQUEST.DESCRIPTION.LABEL' | translate}}</label>\r\n              <label class=\"view-claim__value\">{{claim?.request?.description}}</label>\r\n            </li>\r\n            <li class=\"list-group-item\">\r\n              <label class=\"view-claim__title\">{{'REQUEST.CREATION_DATE.LABEL' | translate}}</label>\r\n              <label class=\"view-claim__value\">{{claim?.request?.creation_date}}</label>\r\n            </li>\r\n            <li class=\"list-group-item\" *ngIf=\"claim?.request?.answer\">\r\n              <label class=\"view-claim__title\">{{'REQUEST.ANSWER.LABEL' | translate}}</label>\r\n              <label class=\"view-claim__value\">{{claim?.request?.answer}}</label>\r\n            </li>\r\n            <li class=\"list-group-item\">\r\n              <label class=\"view-claim__title\">{{'REQUEST.STATE.LABEL' | translate}}</label>\r\n              <label class=\"view-claim__value\">{{claim?.request?.state | state | translate}}</label>\r\n            </li>\r\n            <li class=\"list-group-item\">\r\n              <label class=\"view-claim__title\">{{'REQUEST.TYPE.LABEL' | translate}}</label>\r\n              <label class=\"view-claim__value\">{{claim?.request?.type | requestType }}</label>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Claim } from '../../entities/claim.entities';\nimport { ClaimFacade } from '../../store/claim.facade';\n\n/**\n * Componente encargada de visualizar reclamos\n */\n@Component({\n  selector: 'app-view-claim',\n  templateUrl: './view-claim.component.html',\n  styleUrls: ['./view-claim.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewClaimComponent implements OnInit {\n  constructor(private facade: ClaimFacade, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    if (!!this.responseType) {\n      this.facade.requestGetById(this.responseType);\n    }\n  }\n\n  get responseType(): string {\n    return this.route.snapshot.params.id;\n  }\n\n  get claim$(): Observable<Claim> {\n    return this.facade.getById$.pipe(filter((data) => !!data));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ClaimContainer } from './claim.container';\nimport { CreateClaimComponent } from './components/create-claim/create-claim.component';\nimport { SearchClaimsComponent } from './components/search-claims/search-claims.component';\nimport { ViewClaimComponent } from './components/view-claim/view-claim.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ClaimContainer,\n    children: [\n      {\n        path: '',\n        component: SearchClaimsComponent,\n      },\n      {\n        path: 'save',\n        component: CreateClaimComponent,\n      },\n      {\n        path: ':id',\n        component: ViewClaimComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ClaimRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport * as routes from '../claim.api';\nimport { urlBuilder } from '@core/helpers/url-builder.helper';\nimport { Claim, CreateClaim, ListClaim } from '../entities/claim.entities';\nimport { environment as ENV } from '@environment';\n\n/**\n * Cliente encargado de servicios claim\n */\n@Injectable()\nexport class ClaimService {\n  constructor(private http: HttpClient) {}\n\n  public create(claim: CreateClaim): Observable<Claim> {\n    const url = urlBuilder(ENV.api.claim + routes.default.create);\n    return this.http.post<Claim>(url, claim);\n  }\n\n  public findAll(): Observable<ListClaim> {\n    const url = urlBuilder(ENV.api.claim + routes.default.findAll);\n    return this.http.get<ListClaim>(url);\n  }\n\n  public findById(id: string): Observable<Claim> {\n    const url = urlBuilder(ENV.api.claim + routes.default.findById, { id });\n    return this.http.get<Claim>(url);\n  }\n\n  public filter(filter: string): Observable<ListClaim> {\n    const url = urlBuilder(ENV.api.claim + routes.default.filter, { filter });\n    return this.http.get<ListClaim>(url);\n  }\n}\n","export default {\n  create: '/create',\n  findAll: '/find',\n  findById: '/find/{id}',\n  filter: '/filter/{filter}',\n};\n","import { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { switchMap, mergeMap, catchError, tap } from 'rxjs/operators';\n\nimport { ClaimService } from '../services/claim.service';\nimport * as ClaimActions from './claim.actions';\nimport * as RootActions from '@core/store/actions/common.actions';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable()\nexport class ClaimEffects {\n  constructor(\n    private actions$: Actions,\n    private service: ClaimService,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  public getById$: Observable<Action> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ClaimActions.requestGetById),\n      switchMap(({ id }) =>\n        this.service.findById(id).pipe(\n          mergeMap((response) => [\n            ClaimActions.responseGetById({\n              response,\n            }),\n          ]),\n        ),\n      ),\n    ),\n  );\n\n  public getAll$: Observable<Action> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ClaimActions.requestGetAll),\n      switchMap(() =>\n        this.service.findAll().pipe(\n          mergeMap((response) => [\n            ClaimActions.responseGetAll({\n              response,\n            }),\n            ClaimActions.setLoadingClaims({ isLoading: false }),\n          ]),\n        ),\n      ),\n    ),\n  );\n\n  public create$: Observable<Action> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ClaimActions.requestCreate),\n      switchMap(({ body }) =>\n        this.service.create(body).pipe(\n          tap(() => {\n            this.snackBar.open('Creación exitosa!', null, {\n              duration: 3000,\n            });\n          }),\n          catchError(({ error }) => {\n            this.snackBar.open('Ocurrio un error en la transacción.', null, {\n              duration: 3000,\n            });\n            return of({ error });\n          }),\n          mergeMap((response) => {\n            const actions: Action[] = [\n              RootActions.setLoader({ isLoading: false }),\n            ];\n            if (!('error' in response)) {\n              actions.push(ClaimActions.responseCreate({ response }));\n            }\n\n            return actions;\n          }),\n        ),\n      ),\n    ),\n  );\n\n  public getAllFiltered$: Observable<Action> = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ClaimActions.requestGetAllFiltered),\n      switchMap(({ filter }) =>\n        this.service.filter(filter).pipe(\n          mergeMap((response) => [\n            ClaimActions.responseGetAllFiltered({\n              response,\n            }),\n            ClaimActions.setLoadingClaims({ isLoading: false }),\n          ]),\n        ),\n      ),\n    ),\n  );\n}\n","import { InjectionToken, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ClaimRoutingModule } from './claim-routing.module';\nimport { ClaimContainer } from './claim.container';\nimport { ActionReducerMap, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { claimFeatureName, reducer } from './store/claim.reducer';\nimport { ClaimState } from './store/claim.state';\nimport { ClaimEffects } from './store/claim.effects';\nimport { ClaimFacade } from './store/claim.facade';\nimport { ClaimService } from './services/claim.service';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { CreateClaimComponent } from './components/create-claim/create-claim.component';\nimport { SearchClaimsComponent } from './components/search-claims/search-claims.component';\nimport { FormComponent } from './components/form/form.component';\nimport { AutocompleteModule } from '@core/components/autocomplete/autocomplete.module';\nimport { RequestFacade } from '../request/store/request.facade';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { MatIconModule } from '@angular/material/icon';\nimport { PipesModule } from '@src/app/core/pipes/pipes.module';\nimport { ViewClaimComponent } from './components/view-claim/view-claim.component';\n\nexport const FEATURE_REDUCER_TOKEN = new InjectionToken<\n  ActionReducerMap<ClaimState>\n>('Claim Reducer');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatSnackBarModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    ClaimRoutingModule,\n    StoreModule.forFeature(claimFeatureName, FEATURE_REDUCER_TOKEN),\n    EffectsModule.forFeature([ClaimEffects]),\n    AutocompleteModule,\n    NgxDatatableModule,\n    MatIconModule,\n    PipesModule,\n  ],\n  declarations: [\n    ClaimContainer,\n    CreateClaimComponent,\n    SearchClaimsComponent,\n    FormComponent,\n    ViewClaimComponent,\n  ],\n  providers: [\n    {\n      provide: FEATURE_REDUCER_TOKEN,\n      useValue: reducer,\n    },\n    ClaimFacade,\n    RequestFacade,\n    ClaimService,\n  ],\n  exports: [ClaimContainer],\n})\nexport class ClaimModule {}\n"],"sourceRoot":"webpack:///"}